// *** CONFIGURACI√ìN DE SEGURIDAD Y API ***
// ‚ö†Ô∏è ADVERTENCIA DE SEGURIDAD: En un entorno de producci√≥n, la API_KEY debe
// manejarse en un servidor backend para protegerla de la exposici√≥n.
const API_KEY = "AIzaSyBFGKJQFmyEo59iOa05JuE17HreFcY_sfA";
const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"; 

// ----------------------------------------------------------------
// 1. BASE DE CONOCIMIENTO Y RESPUESTAS PREDEFINIDAS
// ----------------------------------------------------------------
const baseConocimiento = {
    "CONTACTOS": {
        "¬øQui√©n ser√° mi contacto principal durante el proyecto?": "Se te asignara un grupo de acompa√±antes con un lider durante el proyecto",
        "¬øPuedo agendar una llamada o reuni√≥n con un asesor?": "S√≠, con gusto. Haz clic aqu√≠ [Link de Calendario/Booking] llena el formulario de google para una reuni√≥n virtual gratuita de 15 minutos y discutir tu proyecto.",
        "¬øTienen alguna oficina f√≠sica que pueda visitar?": "Trabajamos 100% de forma remota para reducir costos y ofrecerte mejores precios. Todas las reuniones se realizan de forma virtual (Zoom, Meet o WhatsApp).",
        "Quiero una cotizaci√≥n / presupuesto, ¬øqu√© hago?": "Por favor, d√©janos tu correo electr√≥nico y una breve descripci√≥n de tu proyecto. Te enviaremos una solicitud de informaci√≥n detallada en minutos para preparar tu presupuesto.",
        "¬øEn qu√© correo electr√≥nico los puedo contactar?": "Nuestro correo principal es app.crimaju@gmail.com ¬°Escr√≠benos cuando quieras! Respondemos todos los correos en un m√°ximo de 24 horas h√°biles.",
        "¬øC√≥mo son sus formas de pago?": "Aceptamos transferencias bancarias, transferenciasal Nequi y tarjetas de cr√©dito (a trav√©s de pasarelas seguras). Generalmente, pedimos un 50% para iniciar y el 50% al finalizar la web."
    },
    "TESTIMONIOS": {
        "¬øQu√© dicen los clientes sobre ustedes?": "Tenemos diversos testimonios y lo que tienen en com√∫n es que nosotros hacemos muy buen trabajo, quedan muy satisfechos tanto por los resultados y precios",
        "Testimonio 1": "Gracias a App.Crimaju, nuestra empresa ha visto un crecimiento significativo en nuestras ventas y presencia en l√≠nea. Su equipo es incre√≠blemente profesional y siempre est√° dispuesto a ayudar.",
        "Testimonio 2": "La experiencia con App.Crimaju ha sido excepcional. Su atenci√≥n al detalle y compromiso con la calidad son evidentes en cada aspecto de su trabajo.",
        "Testimonio 3": "App.Crimaju ha transformado nuestra presencia en l√≠nea. Su enfoque creativo y estrat√©gico ha dado como resultado un aumento notable en el tr√°fico y las conversiones."
    },
    "SERVICIOS": {
        "¬øQu√© planes de servicio ofrecen?": "Tenemos 4 planes principales: Plan Basic, Plan Premium, Plan Diamond y Plan Unique. ¬øCu√°l te gustar√≠a conocer? (Escribe el nombre del plan).",
        "Plan Basic / Dime el plan m√°s econ√≥mico.": "El Plan Basic es para una web con programaci√≥n b√°sica y una peque√±a base de datos (una sola tabla). Su costo est√° entre 100.000 y 300.000 pesos colombianos.",
        "Plan Premium / Dime las caracter√≠sticas del Premium.": "El Plan Premium incluye la creaci√≥n de una p√°gina web mediana con una base de datos de m√°ximo 3 tablas. Su valor aproximado es de 400.000 y 700.000 pesos colombianos.",
        "Plan Diamond / ¬øQu√© incluye el Plan Diamond?": "El Plan Diamond ofrece una p√°gina web de tama√±o medio-grande con una base de datos de 4 a 7 tablas. Este plan oscila entre 800.000 y 1.000.000 pesos colombianos."
    },
    "SOBRE NOSOTROS": {
        "¬øQu√© es App.Crimaju?": "App.Crimaju se especializa en el dise√±o y creaci√≥n de p√°ginas web para peque√±as y medianas empresas. Te ayudamos a fortalecer tu presencia digital, impulsar tu crecimiento y aumentar tus ventas.",
        "¬øQui√©nes forman el equipo de emprendedores?": "Nuestro equipo est√° formado por Mar√≠a Paula Solarte Salazar, Isabela Hidalgo Gil y Cristobal David Cardona. ¬øTe gustar√≠a saber el rol de alguno en espec√≠fico?",
        "¬øCu√°l es el rol de Mar√≠a Paula Solarte?": "Mar√≠a Paula Solarte Salazar es la Programadora enfocada en la organizaci√≥n y la visi√≥n estrat√©gica del proyecto.",
        "¬øCu√°l es el rol de Isabela Hidalgo?": "Isabela Hidalgo Gil es la Programadora y Dise√±adora del logo. Combina creatividad y tecnolog√≠a en cada detalle de nuestros proyectos."
    }
};

const respuestasSaludo = [
    "¬°Hola! üòä Soy tu chatbot de app.Crimaju, potenciado por Gemini AI. ¬øEn qu√© te puedo ayudar?",
    "¬°Buenos d√≠as! üåü Preg√∫ntame sobre nuestros **servicios**, **contacto** o **equipo**.",
    "¬°Hola! üëã ¬øQu√© te gustar√≠a aprender sobre app.Crimaju hoy?"
];

const respuestasDespedida = [
    "¬°Hasta pronto! üëã Vuelve cuando quieras.",
    "¬°Nos vemos! üòä Que tengas un gran d√≠a.",
    "¬°Adi√≥s! üåü No dudes en contactarnos por correo si tienes m√°s preguntas."
];

const respuestasError = [
    "‚ö†Ô∏è Lo siento, no pude obtener una respuesta de la IA. Por favor, int√©ntalo de nuevo.",
    "‚ùì Hmm, hubo un error de conexi√≥n. Te invito a usar nuestro correo: app.crimaju@gmail.com"
];

// ----------------------------------------------------------------
// 2. FUNCIONES DE AYUDA Y DETECCI√ìN
// ----------------------------------------------------------------

/**
 * Utilidad para obtener un elemento aleatorio de un array.
 */
function getRandom(array) {
    return array[Math.floor(Math.random() * array.length)];
}

/**
 * Detecta si el texto es un saludo.
 */
function detectarSaludo(pregunta) {
    const saludos = ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'saludos', 'qu√© tal', 'hey'];
    const textoLimpio = pregunta.toLowerCase();
    return saludos.some(saludo => textoLimpio.includes(saludo));
}

/**
 * Detecta si el texto es una despedida.
 */
function detectarDespedida(pregunta) {
    const despedidas = ['adi√≥s', 'hasta luego', 'nos vemos', 'chau', 'bye', 'salir', 'terminar'];
    const textoLimpio = pregunta.toLowerCase();
    return despedidas.some(despedida => textoLimpio.includes(despedida));
}

// ----------------------------------------------------------------
// 3. CONEXI√ìN Y L√ìGICA DE GEMINI AI
// ----------------------------------------------------------------

/**
 * Formatea la base de conocimiento para incluirla en el prompt de Gemini (Grounding).
 */
function formatKnowledgeBase() {
    let kbString = "Base de Conocimiento de App.Crimaju:\n";
    for (const category in baseConocimiento) {
        kbString += `\n--- ${category.toUpperCase()} ---\n`;
        for (const question in baseConocimiento[category]) {
            kbString += `P: ${question} | R: ${baseConocimiento[category][question]}\n`;
        }
    }
    return kbString;
}

/**
 * Conecta con la API de Gemini para obtener una respuesta.
 */
async function obtenerRespuestaGemini(preguntaUsuario) {
    if (!API_KEY || API_KEY === "AIzaSyBFGKJQFmyEo59iOa05JuE17HreFcY_sfA") {
         console.error("API Key no configurada.");
         return { 
            respuesta: "‚ö†Ô∏è Por favor, configura la API_KEY de Gemini para que el chatbot funcione.", 
            categoria: "Error_Config" 
        };
    }
    
    const knowledge = formatKnowledgeBase();

    const systemInstruction = `Act√∫a como un agente de soporte amable y profesional para la empresa App.Crimaju. 
    Tu objetivo es responder las preguntas del cliente de forma concisa y precisa.
    
    Usa la siguiente informaci√≥n como tu √öNICA fuente de datos si la pregunta est√° relacionada con servicios, contacto o equipo. Si la pregunta es general, responde abiertamente con tu conocimiento general.

    ${knowledge}
    `;

    try {
        const response = await fetch(`${API_URL}?key=${API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    role: "user",
                    parts: [{ text: preguntaUsuario }] 
                }],
                config: {
                    systemInstruction: systemInstruction,
                    temperature: 0.2,
                }
            })
        });

        const data = await response.json();
        
        const respuestaAI = data.candidates?.[0]?.content?.parts?.[0]?.text 
                            || "‚ö†Ô∏è Lo siento, hubo un problema al obtener la respuesta de Gemini. Int√©ntalo de nuevo.";

        return { 
            respuesta: respuestaAI, 
            categoria: "AI_Gemini"
        };

    } catch (error) {
        console.error("Error al llamar a la API de Gemini:", error);
        return { 
            respuesta: getRandom(respuestasError), 
            categoria: "Error_API" 
        };
    }
}


// ----------------------------------------------------------------
// 4. FUNCIONES DE INTERFAZ Y CHAT
// ----------------------------------------------------------------

// Las siguientes variables *DEBEN* referenciar elementos definidos en el HTML.
const chatContainer = document.getElementById('chat-container');
const chatWindow = document.getElementById('chat-window');
const userInput = document.getElementById('user-input');
const chatForm = document.getElementById('chat-form');

/**
 * Alterna la visibilidad de la ventana del chat.
 */
function toggleChat() {
    const isHidden = chatContainer.classList.contains('hidden');
    if (isHidden) {
        chatContainer.classList.remove('hidden');
        if (chatWindow.children.length === 0) {
            mostrarMensajeBot(getRandom(respuestasSaludo));
        }
        userInput.focus();
    } else {
        chatContainer.classList.add('hidden');
    }
}

/**
 * Crea y muestra un mensaje en la ventana del chat.
 */
function mostrarMensaje(texto, remitente) {
    const mensajeDiv = document.createElement('div');
    const textoFormateado = texto.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); 

    // CLASES CSS basadas en Tailwind CSS (asumiendo que se incluye en el HTML)
    if (remitente === 'user') {
        mensajeDiv.className = 'flex justify-end';
        mensajeDiv.innerHTML = `<div class="bg-blue-500 text-white p-3 rounded-xl rounded-br-none shadow-md text-sm">${textoFormateado}</div>`;
    } else {
        mensajeDiv.className = 'flex justify-start';
        mensajeDiv.innerHTML = `<div class="bg-gray-200 text-gray-800 p-3 rounded-xl rounded-tl-none shadow-sm text-sm whitespace-pre-wrap">${textoFormateado}</div>`;
    }
    chatWindow.appendChild(mensajeDiv);
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

/**
 * Muestra un mensaje del usuario.
 */
function mostrarMensajeUsuario(texto) {
    mostrarMensaje(texto, 'user');
}

/**
 * Muestra un mensaje del bot con un retraso simulado.
 */
function mostrarMensajeBot(texto) {
    setTimeout(() => {
        mostrarMensaje(texto, 'bot');
    }, 300); 
}

/**
 * Maneja el env√≠o del formulario.
 */
async function enviarMensaje(event) {
    event.preventDefault();
    const pregunta = userInput.value.trim();

    if (pregunta.length === 0) return;

    // 1. Mostrar mensaje del usuario y limpiar
    mostrarMensajeUsuario(pregunta);
    userInput.value = '';

    let resultado;
    let loadingMessageElement = null;

    // 2. L√≥gica de Respuesta: Saludo/Despedida vs. Gemini AI
    if (detectarSaludo(pregunta)) {
        resultado = { respuesta: getRandom(respuestasSaludo), categoria: "Saludo" };
    } else if (detectarDespedida(pregunta)) {
        resultado = { respuesta: getRandom(respuestasDespedida), categoria: "Despedida" };
    } else {
        // Mensaje de "Pensando..."
        loadingMessageElement = document.createElement('div');
        loadingMessageElement.className = 'flex justify-start';
        loadingMessageElement.innerHTML = `<div class="bg-gray-200 text-gray-600 p-3 rounded-xl rounded-tl-none shadow-sm text-sm">ü§ñ Pensando...</div>`;
        chatWindow.appendChild(loadingMessageElement);
        chatWindow.scrollTop = chatWindow.scrollHeight;

        // Llamada a la API de Gemini
        resultado = await obtenerRespuestaGemini(pregunta); 
        
        // Remover el mensaje de "Pensando..."
        if (loadingMessageElement) {
            chatWindow.removeChild(loadingMessageElement);
        }
    }

    // 3. Mostrar respuesta final del bot
    mostrarMensajeBot(resultado.respuesta);

    // 4. L√≥gica de cierre para despedida
    if (resultado.categoria === "Despedida") {
        setTimeout(() => {
            chatContainer.classList.add('hidden');
        }, 1500);
    }
}

// Asignar los event listeners
if (chatForm) chatForm.addEventListener('submit', enviarMensaje);
// Exportar la funci√≥n para el bot√≥n HTML
window.toggleChat = toggleChat;